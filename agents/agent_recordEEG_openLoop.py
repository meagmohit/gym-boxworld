import gym
import gym_boxworld
import time
import numpy as np

env = gym.make('BoxWorldNoFrameskip-v3')

env.reset()
speed = 1.5 # in seconds must be greater than 0.2
blink_time = 0.1
break_time = 2.0

traj = {} # trajectory dictionary
traj['start_state'] = [[0,5], [2,3], [4,0], [1,5], [4,1], [5,5], [2,2], [4,1], [2,0], [1,4], [2,3], [3,0], [1,3]]
traj['actions'] = [
                    [2,3,2,0,2,2,3,1,3,0,1,1,3,3,1,3,0,1,1,0,2,3,1,1,3,3,2,2,2,0,2,2,1,1,3,2],
                    [3,0,2,2,2,0,0,1,0,3,3,3,3,1,1,3,2,1,1,1,2,0,0,2,0,2,1,0,2,1,1,1,3,3,1,3,2,3,2,2,2,2],
                    [1,2,0,0,1,1,0,0,1,0,2,2,3,3,3,3,1,0,1,1,3,2,1,1,0,0,1,1,0,2,2,0,2,3,2,0,3,3,1,3,1,1,3,1,1,2,2,2],
                    [0,2,3,0,2,2,3,0,2,3,3,3,3,1,0,2,0,1,0,1,1,1,0,3,3,2,1,0,1,3,2,0,1,1,0,2,3,2],
                    [0,2,0,1,0,1,2,0,0,1,0,3,3,1,2,3,3,1,1,1,3,1,1,0,0,0,1,0,1,1,3,2,2,2,0,2,3,3,3,2,1,3],
                    [0,0,2,2,3,0,0,1,0,2,2,2,3,1,1,1,3,2,1,3,1,3,3,1,1,0,0,2,0,1,0,3,2,1,1,3,2,3,2,0,2,2],
                    [0,0,1,2,2,3,3,1,1,1,1,3,1,1,3,2,3,2,1,1,1,0,2,1,0,0,3,2,2],
                    [2,0,0,1,1,2,2,1,0,1,0,2,3,1,1,0,3,1,3,3,1,3,0,1,1,2,2,0,0,1,1,3,3,1,3,2,3,2,0,2,3,2,2],
                    [1,0,1,2,0,3,3,1,1,3,1,3,1,3,0,0,0,1,1,3,3,2,0,3,1,1,3,3,2,2,0,2,2,3],
                    [1,0,2,2,3,2,1,0,2,2,3,1,1,3,1,2,1,1,3,1,1,2,2,1,3,0,1,1,2,1,3,0,0,2,2,3],
                    [0,1,1,0,2,2,2,3,0,2,3,3,1,1,1,1,3,2,1,0,3,2,3,1,1,0,3,1,0,0,2,1,0,3,2,1,1,3,3,2,2,3,2,0,3,2],
                    [3,0,0,1,1,2,0,1,0,1,2,2,3,1,1,3,3,1,1,3,1,1,2,3,3,1,1,0,0,2,1,0,2,3,3,0,2],
                    [3,2,2,2,0,1,3,3,0,0,3,1,1,1,0,1,3,2,3,1,3,1,1,3,2,0,0,0,1,1,3,3,1,2,2,0,1,2,3,2,3,3,1,1,2,3]
                ]

for _ in range(1):
    done = False
    env.reset()
    traj_id = 9
    env.unwrapped._state = [traj['start_state'][traj_id][0], traj['start_state'][traj_id][1], 0, traj['start_state'][traj_id][0], traj['start_state'][traj_id][1], 0, -1]
    env.render()
    time.sleep(10)
    for action in traj['actions'][traj_id]:
        if not done:
            observation, reward, done, info = env.step(action)
            print action, reward

            env.render(dstate=1)
            time.sleep(blink_time)
            env.render(dstate=0)
            time.sleep(speed - blink_time)

            if reward == 1:
                time.sleep(break_time)

env.close()
